@using System.ComponentModel.DataAnnotations
@using BlazorIsleemApp.Models
@using BlazorIsleemApp.Data
@using BlazorIsleemApp.Components.Shared
@page "/Register"

@inject Data.PDbContext Db
 @rendermode InteractiveServer
<h1>Register</h1>
<div class="row">
    <div class="col-md-4">

     @*     <Alert @ref="alert" /> *@
        <section>
            <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="Register">
                <DataAnnotationsValidator />
                <hr />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" aria-required="true" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" aria-required="true" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputSelect class="form-select" @bind-Value="Input.Role" aria-required="true">
                        <option value="Admin">Admin</option>
                        <option value="DefaultUser">Default User</option>
                    </InputSelect>
                    <label for="role" class="form-label">Role</label>
                    <ValidationMessage For="() => Input.Role" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary" >Register</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>
@if (IsVisable)
{
    <div class="Alert @AlertType">
        @Message
        <button class="btn-close" style="float:right" onclick="Hide"></button>
    </div>
}
@code {
   // private Alert alert;
    private static List<User> userss = new List<User>();
    [SupplyParameterFromForm]
    private User Input { get; set; } = new();
    public static bool SaveUser(User user)
    {
        bool isExsit = userss.Any(x => x.Email == user.Email);
        if (!isExsit)
        {
            userss.Add(user);
         
            return (true);
        }
        return (false);
    }
    public void RegisterUser()
    {
        bool result = SaveUser(new User
            {
                Email = Input.Email,
                Password = Input.Password,
                Role = Input.Role
            }
        );
        if(result)
        {
            
            //Login Success
          ShowSuccess("Sucessfully");
            
        }
        else
        {
            //Login Failed
            ShowFailed("Failed");
        }
    }
    

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required]
        [DataType(DataType.Text)]
        public string Role { get; set; } = "";
    }

   
[Parameter]
public string Message { get; set; }
public bool IsVisable { get; set; }
public string AlertType { get; set; }

public void ShowSuccess(string message)
{
    message = "Alert Success";
    Show(message);
}
public void ShowFailed(string message)
{
    message = "Alert Failed";
    Show(message);
}
private void Show(string message)
{
    Message = message;
    IsVisable = true;
    StateHasChanged();
}
private void Hide(string message)
{
    IsVisable = false;
    StateHasChanged();
}
}
